// Functions known to cause issues in PHP code.
// To add new issues use the format: function name[=>][[N]][description]
// (where N is a severity rating of 1 (Critical) to 3 (Medium) (or optionally, 0 for 'normal'))
//
// NB - function names are case-sensitive for this file

// Untrusted Data
$_REQUEST => [3] Population of PHP's global arrays can result in server-side variables being overwritten by user-submitted data. This functionality is best avoided and should be used with extreme caution. Manually review this section of code to ensure safe usage.
$_FILES => [3] Use of this global array can lead to file upload vulnerabilities. Validate and sanitize file uploads carefully to prevent potential security issues.

// Command Execution (validate user input)
shell_exec => [2] This function allows execution of commands. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
system => [2] This function allows execution of commands. It is dangerous with user-controlled parameters and may facilitate direct attacks against the web server.
exec => [2] This function allows execution of commands. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
popen => [2] This function allows execution of commands. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
passthru => [2] This function allows execution of commands and can reveal output directly to the user. It should be reviewed for safe usage, especially with user input.
proc_open => [2] This function allows execution of commands. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
proc_close => [2] This function can close an opened process, and misuse can lead to unexpected behavior in command execution flow.
proc_get_status => [2] Retrieves information about the process, potentially exposing sensitive system data.

// Code Execution (validate user input)
assert => [2] This function will evaluate PHP code. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
preg_replace => [2] This function can evaluate PHP code. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage. (Note: dangerous "e" flag deprecated since PHP >= 5.5.0 and removed in PHP >= 7.0.0.)
create_function => [2] This function allows execution of commands. It is dangerous when used with user-controlled parameters and may facilitate direct attacks against the web server. Conduct a manual review of this section to ensure safe usage.
include => [2] Using this function with user-controlled parameters can lead to Remote File Inclusion (RFI) vulnerabilities. Ensure files are whitelisted.
require => [2] Similar to include, it can lead to RFI vulnerabilities. Validate any parameters passed to this function.
require_once => [2] Same concerns as require, ensure safety checks for file inclusion.

// Information Disclosure
phpinfo => [3] This debugging function can expose sensitive data to an attacker. Perform a manual check to ensure that its output data is not visible to normal users.
show_source => [3] This function exposes the PHP source code, which can be exploited if the path is user-controlled. Manual checks are needed.
highlight_file => [3] This function exposes the source code of a PHP file, which can be exploited if the path is user-controlled. Manual checks are needed.
var_dump => [3] This debugging function can disclose sensitive information about variables, leading to potential data exposure.
$wpdb->show_errors() => [2] Displaying SQL errors can reveal sensitive information.
$wpdb->hide_errors() => [2] Hiding SQL errors, while useful, can also mask issues during debugging.
$wpdb->print_error() => [2] Printing errors can expose SQL query details to attackers.

// Development Functionality
$_GET['debug'] => [2] The codebase appears to contain test functionality which may be abused by an attacker. Carry out a manual check to determine whether the code path is executable.
$_GET['test'] => [2] The codebase appears to contain test functionality which may be abused by an attacker. Carry out a manual check to determine whether the code path is executable.
$_SESSION['debug'] => [2] Debugging information stored in session variables can be accessed by unauthorized users, leading to information disclosure risks.

// Unsafe Randomization
mt_rand => [3] The application uses pseudo-random number generation that is not cryptographically secure. Carry out a manual check to ensure this is not being used in a process that requires cryptographically secure random numbers.
random_int => [1] While this function is cryptographically secure, misuse or reliance on its output without proper validation can lead to security vulnerabilities.

// Insecure Cryptographic Functions
md5 => [3] MD5 Hashing algorithm is vulnerable to collision attacks.
sha1 => [2] While more secure than MD5, SHA-1 is still considered weak against collision attacks.
CRYPT_STD_DES => [2] Standard DES-based hash with a two-character salt is weak.
CRYPT_EXT_DES => [3] Extended DES-based hash with a nine-character salt is weak.
CRYPT_MD5 => [3] Crypt MD5 function. Whilst this function uses a twelve-character salt, it is still MD5.
mcrypt_cbc => [3] Deprecated function; use mcrypt_generic instead.
mcrypt_cfb => [3] Deprecated function; use mcrypt_generic instead.
mcrypt_ecb => [3] Deprecated function; use mcrypt_generic instead.
mcrypt_ofb => [3] Deprecated function; use mcrypt_generic instead.
mcrypt_generic_end => [3] Deprecated function; use mcrypt_generic_deinit instead.
openssl_decrypt => [3] Requires careful key management; misuse can lead to vulnerabilities if keys are not managed securely.
openssl_encrypt => [3] Same concerns as openssl_decrypt; ensure keys are properly protected.

// File System
fopen => [2] Improper handling of file handles can lead to resource leaks or unexpected behavior.
fclose => [2] Improper handling of file handles can lead to resource leaks or unexpected behavior.
fwrite => [2] Writing to files without proper validation can lead to file inclusion or overwriting sensitive files.
fread => [2] Reading files can lead to exposure of sensitive data if the filename is user-controlled. Ensure filenames are validated.
tmpfile => [2] Careless use can lead to exposing sensitive information if not managed properly.

// Database Interactions
mysqli_query => [2] Executing queries with unsanitized user input can lead to SQL Injection vulnerabilities.
PDO::query => [2] Similar concerns as mysqli_query. Always use prepared statements to avoid SQL injection.
